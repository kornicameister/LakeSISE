;Poacher is an actor who tries to catch a fish and escape from forester

(defrule PoacherAffectAttackByRainOrStorm "Poacher attack ability decreases with storm or rain"
	?poacherActor <- (actor 	(id ?PoacherActorID)(attackRange ?aar))
	(test (eq (sub-string 1 14 ?PoacherActorID) "PoacherActorTS"))
	(or
		(test (eq ?*rain* yes)) 
		(test (eq ?*storm* yes)))
	(not (range-modified ?PoacherActorID))
	(test (> ?aar 0))
	=>
	(assert (range-modified ?PoacherActorID))
	(modify ?poacherActor (attackRange (- ?aar 1)))
	;(printout t "Attack range modified by rain/storm for " ?PoacherActorID)
)

(defrule PoacherAffectAttackByRainOrStorm "Poacher attack ability decreases with storm or rain (if it is lower than 5)"
	?poacherActor <- (actor 	(id ?PoacherActorID)(attackRange ?aar))
	(test (eq (sub-string 1 14 ?PoacherActorID) "PoacherActorTS"))
	(test (eq ?*sun* yes))
	(not (range-modified ?PoacherActorID))
	(test (< ?aar 5))
	=>
	(assert (range-modified ?PoacherActorID))
	(modify ?poacherActor (attackRange (+ ?aar 1)))
	;(printout t "Attack range modified by sun for " ?PoacherActorID)
)

(defrule poacherRunAway
	?poacherActor <- (actor 	(id ?poacherActorID)
								(atField ?poacherFID)
								(weight ?currentPoacherWeight)
								(visionRange ?poacherVR)
								(cash ?curCash)
								(validId ?valid)
								(moveRange ?poacherMR)
								(hp ?hpp)
								(actionDone ?ad))
	?targetActor <- (actor 		(id ?TargetActorID)
								(type forester)
								(atField ?targetFID)
								(corruptionThreshold ?crth))
	?poacherField <- (field (id ?PID)(x ?px)(y ?py))
	?targetField <- (field (id ?TID)(x ?tx)(y ?ty))
	(test (eq ?PID ?poacherFID))
	(test (eq ?TID ?targetFID))
	(test (>= ?poacherVR (sqrt (+ (abs (- ?px ?tx)) (abs (- ?py ?ty))))))
	(test (eq (sub-string 1 14 ?poacherActorID) "PoacherActorTS"))
	(and
		(test (< ?curCash ?crth))
		(test (eq ?valid no))
	)
	(test (neq ?ad yes))
	=>
	(bind ?newMoveRange (+ ?poacherMR 1))
	(modify ?poacherActor (hp (- ?hpp 10))(moveRange ?newMoveRange)(actionDone yes))
	;(printout t "Mega range to run away from forester for " ?poacherActorID " " ?newMoveRange crlf)
)

(defrule poacherTryToBuyID "Poacher buys new valid ID from forester"
	?poacherActor <- (actor (id ?poacherActorID)
							(atField ?poacherFID)
							(visionRange ?poacherVR)
							(cash ?curCash)
							(validId ?valid)
							(actionDone ?ad))
	?targetActor <- (actor 	(id ?TargetActorID)
							(type forester)
							(cash ?tcash)
							(atField ?targetFID)
							(corruptionThreshold ?crth))
	?poacherField <- (field (id ?PID)(x ?px)(y ?py))
	?targetField <- (field (id ?TID)(x ?tx)(y ?ty))
	(test (eq ?PID ?poacherFID))
	(test (eq ?TID ?targetFID))
	(test (>= ?poacherVR (sqrt (+ (abs (- ?px ?tx)) (abs (- ?py ?ty))))))
	(test (eq (sub-string 1 14 ?poacherActorID) "PoacherActorTS"))
	(and
		(test (> ?curCash ?crth))
		(test (eq ?valid no))
	)
	(test (neq ?ad yes))
	
	=>
	(modify ?poacherActor (validId yes)(actionDone yes)(cash 0))
	(modify ?targetActor (cash (+ ?tcash ?curCash))(actionDone yes))
	;(printout t "Well, he managed to buy himself freedom " ?poacherActorID crlf)
)

(defrule tryToCatchFishPoacherP
	?poacherActor <- (actor 	(id ?poacherActorID)
								(atField ?poacherFID)
								(weight ?currentPoacherWeight)
								(attackRange ?poacherAR)
								(attackPower ?poacherAP)
								(howManyFishes ?howMany)
								(targetId ?tarID)
								(actionDone ?ad))
	?targetActor <- (actor 		(id ?TargetActorID)
								(type ?tarTyp)
								(atField ?targetFID)
								(weight ?targetWeight)
								(hp ?healthPts)
								(isAlive yes))
	?poacherField <- (field (id ?PID)(x ?px)(y ?py))
	?targetField <- (field (id ?TID)(x ?tx)(y ?ty))
	(test (eq ?PID ?poacherFID))
	(test (eq ?TID ?targetFID))
	(test (>= ?poacherAR (sqrt (+ (abs (- ?px ?tx)) (abs (- ?py ?ty))))))
	(test (eq (sub-string 1 14 ?poacherActorID) "PoacherActorTS"))
	(test (>= ?poacherAP ?healthPts))
	(or (test (eq ?tarTyp predator_fish))
		(test (eq ?tarTyp herbivore_fish))
		)
	(test (neq ?ad yes))
	=>
	(modify ?targetActor (hp 0))
	(modify ?poacherActor (weight (+ ?currentPoacherWeight ?targetWeight))(howManyFishes (+ ?howMany 1))(actionDone yes))
	;(printout t "Poacher tried to catch a fish and succeded" crlf)
)

(defrule tooWeakToCatchP
	?poacherActor <- (actor (id ?poacherActorID)
							(atField ?poacherFID)
							(weight ?currentPoacherWeight)
							(attackRange ?poacherAR)
							(attackPower ?poacherAP)
							(howManyFishes ?howMany)
							(targetId ?tarID)
							(actionDone ?ad))
	?targetActor <- (actor 	(id ?TargetActorID)
							(type ?tarTyp)
							(atField ?targetFID)
							(weight ?targetWeight)
							(hp ?healthPts)
							(isAlive yes))
	?poacherField <- (field (id ?PID)(x ?px)(y ?py))
	?targetField <- (field (id ?TID)(x ?tx)(y ?ty))
	(test (eq ?PID ?poacherFID))
	(test (eq ?TID ?targetFID))
	(test (>= ?poacherAR (sqrt (+ (abs (- ?px ?tx)) (abs (- ?py ?ty))))))
	(test (eq (sub-string 1 14 ?poacherActorID) "PoacherActorTS"))
	(test (< ?poacherAP ?healthPts))
	(or (test (eq ?tarTyp predator_fish))
		(test (eq ?tarTyp herbivore_fish))
		)
	(test (neq ?ad yes))
	=>
	(modify ?targetActor (hp (- ?healthPts ?poacherAP)))
	(modify ?poacherActor (actionDone yes))
	;(printout t "Poacher tried to catch a fish " crlf)
)