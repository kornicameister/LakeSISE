;Angler is an actor, who tries to catch fish

(defrule AnglerAffectAttackByRainOrStorm "Angler attack ability decreases with storm or rain"
	?anglerActor <- (actor 	(id ?AnglerActorID)(attackRange ?aar))
	(test (eq (sub-string 1 13 ?AnglerActorID) "AnglerActorTS"))
	(or
		(test (eq ?*rain* yes)) 
		(test (eq ?*storm* yes)))
	(not (range-modified ?AnglerActorID))
	(test (> ?aar 0))
	=>
	(assert (range-modified ?AnglerActorID))
	(modify ?anglerActor (attackRange (- ?aar 1)))
	;(printout t "Attack range modified by rain/storm for " ?AnglerActorID)
)

(defrule AnglerAffectAttackBySun "Angler attack ability gets better with sun"
	?anglerActor <- (actor 	(id ?AnglerActorID)(attackRange ?aar))
	(test (eq (sub-string 1 13 ?AnglerActorID) "AnglerActorTS"))
	(test (eq ?*sun* yes))
	(not (range-modified ?AnglerActorID))
	(test (< ?aar 5))
	=>
	(assert (range-modified ?AnglerActorID))
	(modify ?anglerActor (attackRange (+ ?aar 1)))
	;(printout t "Attack range modified by sun for " ?AnglerActorID )
)
	
(defrule tryToCatchFishA "Angler tries to catch a fish"
	?anglerActor <- (actor 	(id ?AnglerActorID)
							(atField ?anglerFID)
							(weight ?currentAnglerWeight)
							(attackRange ?anglerAR)
							(attackPower ?anglerAP)
							(howManyFishes ?howMany)
							(actionDone ?ad))
	?targetActor <- (actor 	(id ?TargetActorID)
							(type ?tarTyp)
							(atField ?targetFID)
							(weight ?targetWeight)
							(hp ?healthPts)
							(isAlive yes))
	?anglerField <- (field (id ?AID)(x ?ax)(y ?ay))
	?targetField <- (field (id ?TID)(x ?tx)(y ?ty))
	(test (eq ?AID ?anglerFID))
	(test (eq ?TID ?targetFID))
	(test (eq (sub-string 1 13 ?AnglerActorID) "AnglerActorTS"))
	(test (>= ?anglerAR (sqrt (+ (abs (- ?ax ?tx)) (abs (- ?ay ?ty))))))
	(test (>= ?anglerAP ?healthPts))
	(or (test (eq ?tarTyp predator_fish))
		(test (eq ?tarTyp herbivore_fish))
		)
	(test (neq ?ad yes))
	=>
	(modify ?targetActor (hp 0)(isAlive no))
	(modify ?anglerActor (weight (+ ?currentAnglerWeight ?targetWeight))(howManyFishes (+ ?howMany 1))(actionDone yes))
	;(printout t ?AnglerActorID " caught a fish" crlf)
)

(defrule tooWeakToCatchA "Angler tries to catch a fish, but it is too powerful"
	?anglerActor <- (actor 	(id ?AnglerActorID)
							(atField ?anglerFID)
							(weight ?currentAnglerWeight)
							(attackRange ?anglerAR)
							(attackPower ?anglerAP)
							(howManyFishes ?howMany)
							(targetId ?tarID)
							(actionDone ?ado))
	?targetActor <- (actor 	(id ?TargetActorID)
							(type ?tarTyp)
							(atField ?targetFID)
							(weight ?targetWeight)
							(hp ?healthPts)
							(isAlive yes))
	?anglerField <- (field (id ?AID)(x ?ax)(y ?ay))
	?targetField <- (field (id ?TID)(x ?tx)(y ?ty))
	(test (eq ?AID ?anglerFID))
	(test (eq ?TID ?targetFID))
	(test (eq (sub-string 1 13 ?AnglerActorID) "AnglerActorTS"))
	(test (>= ?anglerAR (sqrt (+ (abs (- ?ax ?tx)) (abs (- ?ay ?ty))))))
	(test (< ?anglerAP ?healthPts))
	(or (test (eq ?tarTyp predator_fish))
		(test (eq ?tarTyp herbivore_fish))
		)
	(test (neq ?ado yes))
	=>
	(modify ?anglerActor (actionDone yes))
	(modify ?targetActor (hp (- ?healthPts ?anglerAP)))
	;(printout t ?AnglerActorID " did not catch a fish" crlf)
)